diff --git a/cmd/root.go b/cmd/root.go
index 8d38c48..f816e10 100644
--- a/cmd/root.go
+++ b/cmd/root.go
@@ -5,9 +5,6 @@ package cmd
 
 import (
 	"github.com/b9n2038/act/cmd/track"
-	"github.com/b9n2038/act/pkg/adapters/primary/cli"
-	"github.com/b9n2038/act/pkg/adapters/secondary/file"
-	"github.com/b9n2038/act/pkg/application/rating"
 	"github.com/spf13/cobra"
 	"log"
 	"os"
@@ -18,8 +15,15 @@ import (
 var rootCmd = &cobra.Command{
 	Use:   "act",
 	Short: "Little goodies to keep you going.",
-	Long:  `Life fulfillment helper. examples and usage of using your application.`,
-	Run:   func(cmd *cobra.Command, args []string) {},
+	Long: `Life fulfillment helper.
+examples and usage of using your application. For example:
+
+Cobra is a CLI library for Go that empowers applications.
+This application is a tool to generate the needed files
+to quickly create a Cobra application.`,
+	// Uncomment the following line if your bare application
+	// has an action associated with it:
+	// Run: func(cmd *cobra.Command, args []string) { },
 }
 
 // Execute adds all child commands to the root command and sets flags appropriately.
@@ -31,23 +35,20 @@ func Execute() {
 	}
 }
 
-func configureTrackDayRating() {
+func init() {
 	homeDir, err := os.UserHomeDir()
 	if err != nil {
 		log.Fatal(err)
 	}
 
-	repoPath := filepath.Join(homeDir, ".ratings.json")
+	repoPath := filepath.Join(homeDir, ".track.day.rating.json")
 	repo, err := file.NewFileRepository(repoPath)
 	if err != nil {
 		log.Fatal(err)
 	}
-
+	//
+	// Setup service
 	service := rating.NewService(repo)
-
-}
-
-func init() {
 	rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
 	rootCmd.AddCommand(track.TrackCmd)
 }
diff --git a/cmd/track/day.go b/cmd/track/day.go
index a10de00..dc4a3ff 100644
--- a/cmd/track/day.go
+++ b/cmd/track/day.go
@@ -10,8 +10,7 @@ import (
 )
 
 var score int
-
-// var url string
+var url string
 
 // dayCmd represents the day command
 var dayCmd = &cobra.Command{
diff --git a/pkg/track/adapters/primary/cli/commands.go b/pkg/track/adapters/primary/cli/commands.go
deleted file mode 100644
index c8aaee0..0000000
--- a/pkg/track/adapters/primary/cli/commands.go
+++ /dev/null
@@ -1,39 +0,0 @@
-// internal/adapters/primary/cli/commands.go
-package cli
-
-import (
-	"fmt"
-	"time"
-
-	"github.com/b9n2038/act/pkg/track/ports/primary"
-	"github.com/spf13/cobra"
-)
-
-func NewRootCmd(service primary.RatingService) *cobra.Command {
-	rootCmd := &cobra.Command{
-		Use:   "rating",
-		Short: "Day rating management tool",
-	}
-
-	rootCmd.AddCommand(
-		newAddCmd(service),
-		// newListCmd(service),
-		// newWeekCmd(service),
-	)
-
-	return rootCmd
-}
-
-func newAddCmd(service primary.RatingService) *cobra.Command {
-	return &cobra.Command{
-		Use:   "add [rating]",
-		Short: "Add a rating for today",
-		Args:  cobra.ExactArgs(1),
-		RunE: func(cmd *cobra.Command, args []string) error {
-			// Implementation
-			return nil
-		},
-	}
-}
-
-// Additional command implementations...
diff --git a/pkg/track/adapters/secondary/file/repository.go b/pkg/track/adapters/secondary/file/repository.go
deleted file mode 100644
index e69de29..0000000
diff --git a/pkg/track/application/service.go b/pkg/track/application/service.go
deleted file mode 100644
index b1d53b8..0000000
--- a/pkg/track/application/service.go
+++ /dev/null
@@ -1,14 +0,0 @@
-// pkg/ports/primary/rating/service.go
-package rating
-
-import (
-	"context"
-	"github.com/b9n2038/act/pkg/track/domain/rating"
-	"time"
-)
-
-type Service interface {
-	CreateDayRating(ctx context.Context, date time.Time, rating rating.Rating) (rating.DayRating, error)
-	GetWeekRatings(ctx context.Context, year, week int) ([]rating.DayRating, error)
-	GetDateRangeRatings(ctx context.Context, start, end time.Time) ([]rating.DayRating, error)
-}
diff --git a/pkg/track/domain/domain.go b/pkg/track/domain/domain.go
deleted file mode 100644
index 84de048..0000000
--- a/pkg/track/domain/domain.go
+++ /dev/null
@@ -1,158 +0,0 @@
-package rating
-
-import (
-    "fmt"
-    "time"
-)
-
-type Rating int
-
-const (
-    Bad     Rating = iota + 1
-    Poor
-    Fair
-    Good
-    Awesome
-)
-
-func (r Rating) String() string {
-    labels := map[Rating]string{
-        Bad:     "Bad",
-        Poor:    "Poor",
-        Fair:    "Fair",
-        Good:    "Good",
-        Awesome: "Awesome",
-    }
-    if label, exists := labels[r]; exists {
-        return label
-    }
-    return "Invalid Rating"
-}
-
-func (r Rating) Emoji() string {
-    emojis := map[Rating]string{
-        Bad:     "💩",
-        Poor:    "😠",
-        Fair:    "😐",
-        Good:    "😊",
-        Awesome: "🤩",
-    }
-    if emoji, exists := emojis[r]; exists {
-        return emoji
-    }
-    return "❌"
-}
-
-func (r Rating) IsValid() bool {
-    return r >= Bad && r <= Awesome
-}
-
-type DayRating struct {
-    Date   time.Time
-    Rating Rating
-}
-
-func (dr DayRating) Label() string {
-    year := dr.Date.Format("06")        // Last two digits of year
-    week := dr.Date.ISOWeek()           // Get ISO week number
-    weekday := dr.Date.Weekday()        // Get day of week (0-6)
-    return fmt.Sprintf("%sw%02d-%d", year, week, weekday)
-}
-
-func (dr DayRating) String() string {
-    return fmt.Sprintf("%s: %s %s", dr.Label(), dr.Rating.String(), dr.Rating.Emoji())
-}
-
-// NewDayRating creates a new DayRating with validation
-func NewDayRating(date time.Time, rating Rating) (DayRating, error) {
-    if !rating.IsValid() {
-        return DayRating{}, fmt.Errorf("invalid rating value: %d", rating)
-    }
-    return DayRating{
-        Date:   date,
-        Rating: rating,
-    }, nil
-}
-
-// NewRating creates a new Rating with validation
-func NewRating(value int) (Rating, error) {
-    rating := Rating(value)
-    if !rating.IsValid() {
-        return 0, fmt.Errorf("rating must be between %d and %d, got %d", Bad, Awesome, value)
-    }
-    return rating, nil
-}
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-//////
-import (
-	"fmt"
-)
-
-type Rating int
-
-const (
-	Bad     Rating = iota + 1 // 1
-	Poor                      // 2
-	Fair                      // 3
-	Good                      // 4
-	Awesome                   // 5
-)
-
-// String returns the text label for the rating
-func (r Rating) String() string {
-	labels := map[Rating]string{
-		Bad:     "Bad",
-		Poor:    "Poor",
-		Fair:    "Fair",
-		Good:    "Good",
-		Awesome: "Awesome",
-	}
-	if label, exists := labels[r]; exists {
-		return label
-	}
-	return "Invalid Rating"
-}
-
-// Emoji returns the emoji representation of the rating
-func (r Rating) Emoji() string {
-	emojis := map[Rating]string{
-		Bad:     "💩",
-		Poor:    "😠",
-		Fair:    "😐",
-		Good:    "😊",
-		Awesome: "🤩",
-	}
-	if emoji, exists := emojis[r]; exists {
-		return emoji
-	}
-	return "❌"
-}
-
-// IsValid checks if the rating is within valid range
-func (r Rating) IsValid() bool {
-	return r >= Poor && r <= Awesome
-}
-
-// NewRating creates a new Rating with validation
-func NewRating(value int) (Rating, error) {
-	rating := Rating(value)
-	if !rating.IsValid() {
-		return 0, fmt.Errorf("rating must be between %d and %d, got %d", Bad, Awesome, value)
-	}
-	return rating, nil
diff --git a/pkg/track/domain/errors.go b/pkg/track/domain/errors.go
deleted file mode 100644
index 7c2f971..0000000
--- a/pkg/track/domain/errors.go
+++ /dev/null
@@ -1,10 +0,0 @@
-// pkg/domain/rating/errors.go
-package rating
-
-import "errors"
-
-var (
-	ErrInvalidRating = errors.New("invalid rating value")
-	ErrInvalidDate   = errors.New("invalid date")
-	ErrNotFound      = errors.New("rating not found")
-)
diff --git a/pkg/track/domain/rating.go b/pkg/track/domain/rating.go
deleted file mode 100644
index 4410d23..0000000
--- a/pkg/track/domain/rating.go
+++ /dev/null
@@ -1,107 +0,0 @@
-// pkg/domain/rating/rating.go
-package rating
-
-import (
-	"fmt"
-	"time"
-)
-
-type Rating int
-
-const (
-	Bad Rating = iota + 1
-	Poor
-	Fair
-	Good
-	Awesome
-)
-
-func (r Rating) String() string {
-	labels := map[Rating]string{
-		Bad:     "Bad",
-		Poor:    "Poor",
-		Fair:    "Fair",
-		Good:    "Good",
-		Awesome: "Awesome",
-	}
-	if label, exists := labels[r]; exists {
-		return label
-	}
-	return "Invalid Rating"
-}
-
-func (r Rating) Emoji() string {
-	emojis := map[Rating]string{
-		Bad:     "💩",
-		Poor:    "😠",
-		Fair:    "😐",
-		Good:    "😊",
-		Awesome: "🤩",
-	}
-	if emoji, exists := emojis[r]; exists {
-		return emoji
-	}
-	return "❌"
-}
-
-func (r Rating) IsValid() bool {
-	return r >= Bad && r <= Awesome
-}
-
-// DayRating entity
-type DayRating struct {
-	ID     string
-	Date   time.Time
-	Rating Rating
-}
-
-func (dr DayRating) Label() string {
-	year := dr.Date.Format("06")
-	_, week := dr.Date.ISOWeek()
-	weekday := dr.Date.Weekday()
-	return fmt.Sprintf("%sw%02d-%d", year, week, weekday)
-}
-
-func (dr DayRating) String() string {
-	return fmt.Sprintf("%s: %s %s", dr.Label(), dr.Rating.String(), dr.Rating.Emoji())
-}
-
-// NewDayRating is a factory function for creating DayRating entities
-// func NewDayRating(date time.Time, rating Rating) (DayRating, error) {
-// 	if !rating.IsValid() {
-// 		return DayRating{}, fmt.Errorf("invalid rating value: %d", rating)
-// 	}
-//
-// 	return DayRating{
-// 		ID:     generateID(), // You would implement this based on your ID strategy
-// 		Date:   date,
-// 		Rating: rating,
-// 	}, nil
-// }
-//
-// // DayRatingRepository defines the interface for persisting DayRatings
-// type DayRatingRepository interface {
-// 	Save(DayRating) error
-// 	GetByID(id string) (DayRating, error)
-// 	GetByDateRange(start, end time.Time) ([]DayRating, error)
-// 	GetByWeek(year int, week int) ([]DayRating, error)
-// }
-//
-// // Errors that can occur in the rating domain
-// var (
-// 	ErrInvalidRating = fmt.Errorf("invalid rating value")
-// 	ErrInvalidDate   = fmt.Errorf("invalid date")
-// )
-//
-// // helper functions
-// func NewRating(value int) (Rating, error) {
-// 	rating := Rating(value)
-// 	if !rating.IsValid() {
-// 		return 0, ErrInvalidRating
-// 	}
-// 	return rating, nil
-// }
-//
-// func generateID() string {
-// 	return ""
-// }
diff --git a/pkg/track/ports/application.go b/pkg/track/ports/application.go
deleted file mode 100644
index e69de29..0000000
diff --git a/pkg/track/ports/primary/cli/rating.go b/pkg/track/ports/primary/cli/rating.go
deleted file mode 100644
index 1a452a7..0000000
--- a/pkg/track/ports/primary/cli/rating.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// pkg/ports/primary/rating/service.go
-
-package rating
-
-import (
-	"context"
-	"github.com/b9n2038/act/pkg/track/domain/rating"
-	"time"
-)
-
-type Service interface {
-	CreateDayRating(ctx context.Context, date time.Time, rating rating.Rating) (rating.DayRating, error)
-	GetWeekRatings(ctx context.Context, year, week int) ([]rating.DayRating, error)
-	GetDateRangeRatings(ctx context.Context, start, end time.Time) ([]rating.DayRating, error)
-}
diff --git a/pkg/track/ports/secondary/repository.go b/pkg/track/ports/secondary/repository.go
deleted file mode 100644
index 324819d..0000000
--- a/pkg/track/ports/secondary/repository.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// internal/ports/output/rating/repository.go
-package rating
-
-import (
-	"context"
-	"github.com/act/pkg/track/domain/rating"
-	"time"
-)
-
-type Repository interface {
-	Save(ctx context.Context, r rating.DayRating) error
-	GetByID(ctx context.Context, id string) (rating.DayRating, error)
-	GetByDateRange(ctx context.Context, start, end time.Time) ([]rating.DayRating, error)
-	GetByWeek(ctx context.Context, year, week int) ([]rating.DayRating, error)
-}
